<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.mapper.ProductMapper">
    
    <!-- 기본 상품 조회 -->
    <select id="selectProductById" parameterType="string" resultType="com.example.model.Product">
        SELECT * FROM products WHERE product_id = #{productId}
    </select>
    
    <!-- 조건부 상품 조회 (다이나믹 쿼리) -->
    <select id="selectProductsByCondition" parameterType="map" resultType="com.example.model.Product">
        SELECT * FROM products
        <where>
            <if test="name != null and name != ''">
                AND product_name LIKE #{name}
            </if>
            <if test="category != null and category != ''">
                AND category_id = #{category}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="delYn != null and delYn != ''">
                AND del_yn = #{delYn}
            </if>
        </where>
        ORDER BY created_date DESC
    </select>
    
    <!-- 고급 조건부 상품 조회 (복잡한 다이나믹 쿼리) -->
    <select id="selectProductsByAdvancedCondition" parameterType="map" resultType="com.example.model.Product">
        SELECT p.*, c.category_name, b.brand_name
        FROM products p
        LEFT JOIN categories c ON p.category_id = c.category_id
        LEFT JOIN brands b ON p.brand_id = b.brand_id
        <where>
            <if test="categoryId != null and categoryId != ''">
                AND p.category_id = #{categoryId}
            </if>
            <if test="brandId != null and brandId != ''">
                AND p.brand_id = #{brandId}
            </if>
            <if test="minPrice != null">
                AND p.price >= #{minPrice}
            </if>
            <if test="maxPrice != null">
                AND p.price &lt;= #{maxPrice}
            </if>
            <if test="minStock != null">
                AND p.stock_quantity >= #{minStock}
            </if>
            <if test="maxStock != null">
                AND p.stock_quantity &lt;= #{maxStock}
            </if>
            <if test="statusList != null and statusList.size() > 0">
                AND p.status IN
                <foreach collection="statusList" item="status" open="(" separator="," close=")">
                    #{status}
                </foreach>
            </if>
        </where>
        ORDER BY p.created_date DESC
    </select>
    
    <!-- 카테고리별 상품 조회 -->
    <select id="selectProductsByCategory" parameterType="string" resultType="com.example.model.Product">
        SELECT * FROM products 
        WHERE category_id = #{categoryId}
        ORDER BY product_name
    </select>
    
    <!-- 재고 업데이트 -->
    <update id="updateProductStock">
        UPDATE products 
        SET stock_quantity = stock_quantity + #{quantity},
            updated_date = SYSDATE
        WHERE product_id = #{productId}
    </update>
    
    <!-- 동적 상품 업데이트 -->
    <update id="updateProductDynamic" parameterType="com.example.model.Product">
        UPDATE products 
        <set>
            <if test="productName != null and productName != ''">
                product_name = #{productName},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="categoryId != null">
                category_id = #{categoryId},
            </if>
            <if test="brandId != null">
                brand_id = #{brandId},
            </if>
            <if test="stockQuantity != null">
                stock_quantity = #{stockQuantity},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
            updated_date = SYSDATE
        </set>
        WHERE product_id = #{productId}
    </update>
    
    <!-- 상품 삭제 (논리 삭제) -->
    <update id="deleteProduct" parameterType="string">
        UPDATE products 
        SET del_yn = 'Y', 
            updated_date = SYSDATE 
        WHERE product_id = #{productId}
    </update>
    
    <!-- 브랜드별 상품 조회 -->
    <select id="selectProductsByBrand" parameterType="string" resultType="com.example.model.Product">
        SELECT p.*, b.brand_name, b.country
        FROM products p
        INNER JOIN brands b ON p.brand_id = b.brand_id
        WHERE p.brand_id = #{brandId}
          AND p.del_yn = 'N'
          AND p.status = 'ACTIVE'
        ORDER BY p.product_name
    </select>
    
    <!-- 재고 부족 상품 조회 -->
    <select id="selectLowStockProducts" parameterType="int" resultType="com.example.model.Product">
        SELECT p.*, 
               i.current_stock,
               i.reorder_point,
               s.supplier_name,
               s.lead_time_days
        FROM products p
        LEFT JOIN inventory i ON p.product_id = i.product_id
        LEFT JOIN suppliers s ON p.supplier_id = s.supplier_id
        WHERE i.current_stock &lt;= #{threshold}
          AND p.status = 'ACTIVE'
          AND p.del_yn = 'N'
        ORDER BY i.current_stock ASC, s.lead_time_days DESC
    </select>
    
    <!-- 카테고리별 상품 통계 -->
    <select id="getProductStatsByCategory" resultType="map">
        SELECT c.category_name,
               COUNT(p.product_id) as product_count,
               AVG(p.price) as avg_price,
               MIN(p.price) as min_price,
               MAX(p.price) as max_price,
               SUM(p.stock_quantity) as total_stock,
               COUNT(CASE WHEN p.status = 'ACTIVE' THEN 1 END) as active_products,
               COUNT(CASE WHEN p.status = 'INACTIVE' THEN 1 END) as inactive_products
        FROM categories c
        LEFT JOIN products p ON c.category_id = p.category_id AND p.del_yn = 'N'
        GROUP BY c.category_id, c.category_name
        HAVING COUNT(p.product_id) > 0
        ORDER BY product_count DESC, avg_price DESC
    </select>
    
    <!-- 상품 판매 성과 분석 -->
    <select id="analyzeProductSalesPerformance" parameterType="map" resultType="map">
        SELECT p.product_id, p.product_name, p.price,
               c.category_name, b.brand_name,
               COUNT(DISTINCT oi.order_id) as order_count,
               SUM(oi.quantity) as total_sold,
               SUM(oi.quantity * oi.unit_price) as total_revenue,
               AVG(oi.unit_price) as avg_selling_price,
               ROUND(SUM(oi.quantity * oi.unit_price) / SUM(oi.quantity), 2) as weighted_avg_price,
               COUNT(DISTINCT o.user_id) as unique_customers,
               MAX(o.order_date) as last_sold_date,
               DATEDIFF(CURDATE(), MAX(o.order_date)) as days_since_last_sale
        FROM products p
        INNER JOIN order_items oi ON p.product_id = oi.product_id
        INNER JOIN orders o ON oi.order_id = o.order_id
        LEFT JOIN categories c ON p.category_id = c.category_id
        LEFT JOIN brands b ON p.brand_id = b.brand_id
        <where>
            o.status = 'COMPLETED'
            AND p.del_yn = 'N'
            <if test="dateFrom != null">
                AND o.order_date >= #{dateFrom}
            </if>
            <if test="dateTo != null">
                AND o.order_date &lt;= #{dateTo}
            </if>
            <if test="categoryId != null">
                AND p.category_id = #{categoryId}
            </if>
            <if test="brandId != null">
                AND p.brand_id = #{brandId}
            </if>
            <if test="minRevenue != null">
                AND (SELECT SUM(oi2.quantity * oi2.unit_price) 
                     FROM order_items oi2 
                     INNER JOIN orders o2 ON oi2.order_id = o2.order_id
                     WHERE oi2.product_id = p.product_id 
                     AND o2.status = 'COMPLETED') >= #{minRevenue}
            </if>
        </where>
        GROUP BY p.product_id, p.product_name, p.price,
                 c.category_name, b.brand_name
        HAVING total_sold > 0
        ORDER BY total_revenue DESC, total_sold DESC
        
        <if test="topProducts != null">
            LIMIT #{topProducts}
        </if>
    </select>UPDATE products
        <set>
            <if test="productName != null and productName != ''">
                product_name = #{productName},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="stockQuantity != null">
                stock_quantity = #{stockQuantity},
            </if>
            <if test="status != null and status != ''">
                status = #{status},
            </if>
            <if test="categoryId != null and categoryId != ''">
                category_id = #{categoryId},
            </if>
            <if test="brandId != null and brandId != ''">
                brand_id = #{brandId},
            </if>
            <if test="supplierId != null and supplierId != ''">
                supplier_id = #{supplierId},
            </if>
            <if test="warehouseId != null and warehouseId != ''">
                warehouse_id = #{warehouseId},
            </if>
            updated_date = SYSDATE
        </set>
        WHERE product_id = #{productId}
    </update>
    
    <!-- 동적 상품 삽입 -->
    <insert id="insertProductDynamic" parameterType="com.example.model.Product">
        INSERT INTO products (
            <trim suffixOverrides=",">
                <if test="productId != null and productId != ''">product_id,</if>
                <if test="productName != null and productName != ''">product_name,</if>
                <if test="description != null and description != ''">description,</if>
                <if test="price != null">price,</if>
                <if test="stockQuantity != null">stock_quantity,</if>
                <if test="status != null and status != ''">status,</if>
                <if test="categoryId != null and categoryId != ''">category_id,</if>
                <if test="brandId != null and brandId != ''">brand_id,</if>
                <if test="supplierId != null and supplierId != ''">supplier_id,</if>
                <if test="warehouseId != null and warehouseId != ''">warehouse_id,</if>
                created_date,
                updated_date,
                del_yn
            </trim>
        ) VALUES (
            <trim suffixOverrides=",">
                <if test="productId != null and productId != ''">#{productId},</if>
                <if test="productName != null and productName != ''">#{productName},</if>
                <if test="description != null and description != ''">#{description},</if>
                <if test="price != null">#{price},</if>
                <if test="stockQuantity != null">#{stockQuantity},</if>
                <if test="status != null and status != ''">#{status},</if>
                <if test="categoryId != null and categoryId != ''">#{categoryId},</if>
                <if test="brandId != null and brandId != ''">#{brandId},</if>
                <if test="supplierId != null and supplierId != ''">#{supplierId},</if>
                <if test="warehouseId != null and warehouseId != ''">#{warehouseId},</if>
                SYSDATE,
                SYSDATE,
                'N'
            </trim>
        )
    </insert>
    
    <!-- 조건부 상품 삭제 -->
    <delete id="deleteProductsByCondition" parameterType="map">
        UPDATE products 
        SET del_yn = 'Y', updated_date = SYSDATE
        <where>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="categoryId != null and categoryId != ''">
                AND category_id = #{categoryId}
            </if>
            <if test="beforeDate != null and beforeDate != ''">
                AND created_date &lt; TO_DATE(#{beforeDate}, 'YYYY-MM-DD')
            </if>
        </where>
    </delete>
    
    <!-- 동적 COUNT 쿼리 -->
    <select id="countProductsByCondition" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM products
        <where>
            <if test="categoryId != null and categoryId != ''">
                AND category_id = #{categoryId}
            </if>
            <if test="status != null and status != ''">
                AND status = #{status}
            </if>
            <if test="minPrice != null">
                AND price >= #{minPrice}
            </if>
            <if test="maxPrice != null">
                AND price &lt;= #{maxPrice}
            </if>
            <if test="delYn != null and delYn != ''">
                AND del_yn = #{delYn}
            </if>
        </where>
    </select>
    
</mapper>
