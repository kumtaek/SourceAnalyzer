<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.dao.ProxyDao">

    <!-- v1 API에서 사용자 조회 -->
    <select id="selectUsersFromV1" resultType="map">
        SELECT 
            user_id,
            username,
            email,
            status,
            created_at
        FROM users_v1
        WHERE del_yn = 'N'
        ORDER BY created_at DESC
        LIMIT 100
    </select>

    <!-- v1 API에 사용자 생성 -->
    <insert id="insertUserToV1" parameterType="map">
        INSERT INTO users_v1 (
            username,
            email,
            status,
            created_at,
            del_yn
        ) VALUES (
            #{userData.username},
            #{userData.email},
            #{userData.status},
            NOW(),
            'N'
        )
    </insert>

    <!-- 내부 제품 서비스에서 제품 조회 -->
    <select id="selectProductsFromInternalService" resultType="map">
        SELECT 
            p.product_id,
            p.product_name,
            p.price,
            p.stock_quantity,
            c.category_name,
            b.brand_name
        FROM products p
        JOIN categories c ON p.category_id = c.category_id
        JOIN brands b ON p.brand_id = b.brand_id
        WHERE p.del_yn = 'N'
          AND p.status = 'ACTIVE'
        ORDER BY p.created_at DESC
        LIMIT 50
    </select>

    <!-- 내부 주문 서비스에서 주문 조회 -->
    <select id="selectOrdersFromInternalService" resultType="map">
        SELECT 
            o.order_id,
            o.user_id,
            o.order_date,
            o.total_amount,
            o.status,
            u.username,
            u.email
        FROM orders o
        JOIN users u ON o.user_id = u.user_id
        WHERE o.del_yn = 'N'
        ORDER BY o.order_date DESC
        LIMIT 100
    </select>

    <!-- 외부 결제 게이트웨이에서 결제 처리 -->
    <select id="processPaymentExternal" parameterType="map" resultType="map">
        SELECT 
            payment_id,
            order_id,
            amount,
            payment_method,
            status,
            transaction_id,
            processed_at
        FROM payments
        WHERE order_id = #{paymentData.orderId}
          AND amount = #{paymentData.amount}
          AND del_yn = 'N'
    </select>

</mapper>
