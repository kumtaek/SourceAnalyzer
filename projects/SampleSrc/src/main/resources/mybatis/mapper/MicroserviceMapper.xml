<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.dao.MicroserviceDao">

    <!-- 통합 사용자 정보 조회 -->
    <select id="selectUserProfile" parameterType="long" resultType="map">
        SELECT 
            u.user_id,
            u.username,
            u.email,
            u.status,
            u.created_at,
            ui.phone,
            ui.address,
            ui.birth_date,
            ui.last_login_at,
            up.profile_image,
            up.bio,
            up.preferences,
            COUNT(o.order_id) as total_orders,
            SUM(o.total_amount) as total_spent
        FROM users u
        LEFT JOIN user_info ui ON u.user_id = ui.user_id
        LEFT JOIN user_profiles up ON u.user_id = up.user_id
        LEFT JOIN orders o ON u.user_id = o.user_id AND o.del_yn = 'N'
        WHERE u.user_id = #{userId}
          AND u.del_yn = 'N'
        GROUP BY u.user_id
    </select>

    <!-- 통합 주문 정보 조회 -->
    <select id="selectOrderDetails" parameterType="long" resultType="map">
        SELECT 
            o.order_id,
            o.user_id,
            o.order_date,
            o.total_amount,
            o.status,
            o.shipping_address,
            u.username,
            u.email,
            u.phone,
            p.product_name,
            p.price,
            oi.quantity,
            oi.subtotal
        FROM orders o
        JOIN users u ON o.user_id = u.user_id
        JOIN order_items oi ON o.order_id = oi.order_id
        JOIN products p ON oi.product_id = p.product_id
        WHERE o.order_id = #{orderId}
          AND o.del_yn = 'N'
          AND oi.del_yn = 'N'
          AND p.del_yn = 'N'
    </select>

    <!-- 통합 대시보드 데이터 -->
    <select id="selectDashboardData" resultType="map">
        SELECT 
            (SELECT COUNT(*) FROM users WHERE del_yn = 'N') as total_users,
            (SELECT COUNT(*) FROM products WHERE del_yn = 'N' AND status = 'ACTIVE') as total_products,
            (SELECT COUNT(*) FROM orders WHERE del_yn = 'N') as total_orders,
            (SELECT SUM(total_amount) FROM orders WHERE del_yn = 'N' AND status = 'COMPLETED') as total_revenue,
            (SELECT COUNT(*) FROM notifications WHERE del_yn = 'N' AND is_read = 'N') as unread_notifications,
            (SELECT COUNT(*) FROM recommendations WHERE del_yn = 'N' AND status = 'ACTIVE') as active_recommendations
    </select>

    <!-- 통합 검색 -->
    <select id="selectGlobalSearch" parameterType="string" resultType="map">
        SELECT 
            'user' as type,
            user_id as id,
            username as name,
            email as description,
            created_at
        FROM users
        WHERE (username LIKE CONCAT('%', #{query}, '%') OR email LIKE CONCAT('%', #{query}, '%'))
          AND del_yn = 'N'
        
        UNION ALL
        
        SELECT 
            'product' as type,
            product_id as id,
            product_name as name,
            description,
            created_at
        FROM products
        WHERE (product_name LIKE CONCAT('%', #{query}, '%') OR description LIKE CONCAT('%', #{query}, '%'))
          AND del_yn = 'N'
          AND status = 'ACTIVE'
        
        UNION ALL
        
        SELECT 
            'order' as type,
            order_id as id,
            CONCAT('Order #', order_id) as name,
            CONCAT('Total: $', total_amount) as description,
            order_date as created_at
        FROM orders
        WHERE order_id LIKE CONCAT('%', #{query}, '%')
          AND del_yn = 'N'
        
        ORDER BY created_at DESC
        LIMIT 50
    </select>

    <!-- 통합 알림 발송 -->
    <insert id="insertNotification" parameterType="map">
        INSERT INTO notifications (
            user_id,
            title,
            message,
            type,
            is_read,
            created_at,
            del_yn
        ) VALUES (
            #{notificationData.userId},
            #{notificationData.title},
            #{notificationData.message},
            #{notificationData.type},
            'N',
            NOW(),
            'N'
        )
    </insert>

</mapper>
