# 소스 분석 필터 설정
# 분석에 포함하거나 제외할 파일 및 디렉토리 패턴을 정의합니다.
# "**/target/**" 이렇게 명시하면 상,하위 경로는 몇 Depth이던 상관없고 중간에 /target/이라는 폴더가 있으면 만족


# 포함할 파일 패턴
include_patterns:
  - "**/*.java"
  - "**/*.jsp"
  - "**/*.xml"
  - "**/*.sql"
  - "**/*.properties"
  - "**/*.jar"
  - "**/*.vue"      # Vue.js 컴포넌트 파일
  - "**/*.js"       # JavaScript 파일 (Vue 서비스, API 모듈)
  - "**/*.jsx"      # React JSX 파일 (기존 React 컴포넌트 지원)
  - "**/*.ts"       # TypeScript 파일
  - "**/*.tsx"      # TypeScript JSX 파일
  - "**/*.yaml"     # YAML 설정 파일
  - "**/*.yml"      # YAML 설정 파일

# 제외할 디렉토리 패턴
exclude_directories:
  - "**/target/**"
  - "**/build/**"
  - "**/test/**"
  - "**/.git/**"
  - "**/node_modules/**"
  - "**/bin/**"
  - "**/out/**"
  - "**/report/**"
  - "**/logs/**"
  - "**/temp/**"
  - "**/backup/**"
  - "**/dist/**"        # 빌드 결과물 디렉토리
  - "**/.idea/**"       # IntelliJ IDEA 설정
  - "**/.vscode/**"     # VS Code 설정
  - "**/coverage/**"    # 테스트 커버리지 결과
  # 주의: "**/config/**" 제거 - JPA 설정 파일들을 분석에 포함하기 위해

# 제외할 파일 패턴
exclude_files:
  - "**/*.class"
  - "**/*.log"
  - "**/*.tmp"
  - "**/*.bak"
  - "**/*.swp"
  - "**/*.orig"
  - "**/Architecture_Report_*.txt"
  - "**/ERD_Report_*.txt"
  - "**/CallChain_Report_*.html"
  - "**/*_Report_*.txt"
  - "**/*_Report_*.html"

# 최대 파일 크기 (바이트)
max_file_size: 10485760  # 10MB

# 최소 파일 크기 (바이트)
min_file_size: 1

# 분석할 파일 확장자
supported_extensions:
  - ".java"
  - ".jsp"
  - ".xml"
  - ".sql"
  - ".properties"
  - ".jar"
  - ".vue"       # Vue.js 컴포넌트
  - ".js"        # JavaScript 파일
  - ".jsx"       # React JSX 파일
  - ".ts"        # TypeScript 파일
  - ".tsx"       # TypeScript JSX 파일
  - ".yaml"      # YAML 설정 파일
  - ".yml"       # YAML 설정 파일

# 특정 파일 타입별 설정
file_type_settings:
  java:
    enabled: true
    max_lines: 10000
    parse_annotations: true
    parse_imports: true
  
  jsp:
    enabled: true
    max_lines: 5000
    parse_jstl: true
    parse_scriptlets: true
  
  xml:
    enabled: true
    max_lines: 5000
    parse_namespaces: true
    parse_attributes: true
  
  sql:
    enabled: true
    max_lines: 1000
    parse_comments: true
    parse_hints: true
  
  properties:
    enabled: true
    max_lines: 1000
    parse_encodings: true
  
  jar:
    enabled: true
    max_size: 52428800  # 50MB
    parse_manifest: true
    parse_class_files: false  # 성능상 기본적으로 비활성화
  
  # Vue.js 파일 설정
  vue:
    enabled: true
    max_lines: 5000
    parse_template: true      # <template> 섹션 파싱
    parse_script: true        # <script> 섹션 파싱
    parse_style: false        # <style> 섹션은 분석 제외
    extract_api_calls: true   # axios 등 API 호출 추출
    extract_components: true  # 컴포넌트 import/export 추출
  
  # JavaScript 파일 설정
  js:
    enabled: true
    max_lines: 3000
    parse_imports: true       # import/require 문 파싱
    parse_exports: true       # export 문 파싱
    parse_functions: true     # 함수 정의 파싱
    extract_api_calls: true   # API 호출 추출
    extract_vue_services: true # Vue 서비스 모듈 추출
  
  # JSX 파일 설정 (React 컴포넌트)
  jsx:
    enabled: true
    max_lines: 3000
    parse_imports: true
    parse_exports: true
    parse_components: true
    extract_api_calls: true
  
  # TypeScript 파일 설정
  ts:
    enabled: true
    max_lines: 3000
    parse_imports: true
    parse_exports: true
    parse_types: true         # 타입 정의 파싱
    parse_interfaces: true    # 인터페이스 파싱
  
  # TypeScript JSX 파일 설정
  tsx:
    enabled: true
    max_lines: 3000
    parse_imports: true
    parse_exports: true
    parse_components: true
    parse_types: true
  
  # YAML 설정 파일
  yaml:
    enabled: true
    max_lines: 2000
    parse_spring_config: true # Spring Boot 설정 파싱
    parse_jpa_config: true    # JPA 관련 설정 파싱
  
  yml:
    enabled: true
    max_lines: 2000
    parse_spring_config: true
    parse_jpa_config: true

# =============================================================================
# 경로 매핑 설정 (Java 파일 경로를 XML 파일 경로로 변환)
# =============================================================================
# 
# 이 설정은 SourceAnalyzer가 Java 파일에서 MyBatis XML 파일을 찾을 때
# 사용하는 경로 변환 규칙을 정의합니다.
#
# 동작 방식:
# 1. Java 파일 경로에서 매칭되는 패턴을 찾습니다
# 2. 매칭되는 패턴을 XML 디렉토리 패턴으로 변환합니다
# 3. 우선순위: 위에서부터 아래로 순서대로 매칭 시도
#
# 예시:
#   Java: src/main/java/com/example/UserMapper.java
#   XML:  src/main/resources/com/example/UserMapper.xml
#
# 자세한 설명은 docs/설정파일_가이드_target_source_config_yaml_분석대상및경로매핑.md 참조
# =============================================================================
path_mappings:
  # =============================================================================
  # 표준 프로젝트 구조 (우선순위 높음)
  # =============================================================================
  
  # Maven/Gradle 표준 구조
  "src/main/java": "src/main/resources"    # Maven 표준: src/main/java → src/main/resources
  "src/test/java": "src/test/resources"    # Maven 테스트: src/test/java → src/test/resources
  
  # Gradle 대안 구조
  "src/java": "src/resources"              # Gradle 대안: src/java → src/resources
  "src/test": "src/test-resources"         # Gradle 테스트: src/test → src/test-resources
  
  # 단순 구조
  "java": "resources"                      # 단순 구조: java → resources
  "test": "test-resources"                 # 단순 테스트: test → test-resources
  
  # =============================================================================
  # 커스텀 패턴들 (범용적)
  # =============================================================================
  
  "src/com": "src/mapper"                  # com 패키지 → mapper 디렉토리
  "src/dao": "src/sql"                     # DAO 패키지 → sql 디렉토리
  "src/service": "src/mapper"              # Service 패키지 → mapper 디렉토리
  "src/controller": "src/mapper"           # Controller 패키지 → mapper 디렉토리
  "src/repository": "src/mapper"           # Repository 패키지 → mapper 디렉토리
  "src/entity": "src/mapper"               # Entity 패키지 → mapper 디렉토리
  "src/model": "src/mapper"                # Model 패키지 → mapper 디렉토리
  "src/domain": "src/mapper"               # Domain 패키지 → mapper 디렉토리
  "src/business": "src/mapper"             # Business 패키지 → mapper 디렉토리
  "src/logic": "src/mapper"                # Logic 패키지 → mapper 디렉토리
  
  # =============================================================================
  # JPA 및 Vue.js 관련 경로 매핑
  # =============================================================================
  
  # JPA Repository → Entity 매핑
  "src/main/java/com/example/jpa/repository": "src/main/java/com/example/jpa/entity"
  "src/main/java/com/example/jpa/service": "src/main/java/com/example/jpa/repository"
  "src/main/java/com/example/jpa/controller": "src/main/java/com/example/jpa/service"
  
  # Vue.js 컴포넌트 → API 서비스 매핑
  "src/main/webapp/vue/components": "src/main/webapp/vue/services"
  
  # Spring Boot 설정 파일 매핑
  "src/main/java/com/example/jpa/config": "src/main/resources"
  
  # =============================================================================
  # 프로젝트별 커스텀 구조 (예시)
  # =============================================================================
  # 필요시 아래 주석을 해제하고 프로젝트에 맞게 수정하세요
  # "src/com/example": "src/mapper"        # 특정 패키지 → mapper 디렉토리
  # "src/dao": "src/sql"                   # DAO → sql 디렉토리 (이미 위에 정의됨)
  
  # =============================================================================
  # API 연결 구조 매핑 (Frontend → Backend)
  # =============================================================================
  
  # Vue 컴포넌트에서 사용하는 API 엔드포인트 패턴
  # 이 매핑은 FRONTEND_API와 API_ENTRY 연결 관계 도출에 사용됨
  "vue/components/JpaUserManagement": "api/jpa/users"
  "vue/components/JpaProductManagement": "api/jpa/products"
  "vue/services/JpaApiService": "api/jpa"

# =============================================================================
# JPA 및 Vue.js 특화 분석 설정
# =============================================================================

# JPA 어노테이션 분석 설정
jpa_analysis:
  enabled: true
  # JPA 어노테이션 목록
  annotations:
    - "@Entity"
    - "@Table"
    - "@Id"
    - "@GeneratedValue"
    - "@Column"
    - "@JoinColumn"
    - "@OneToMany"
    - "@ManyToOne"
    - "@OneToOne"
    - "@ManyToMany"
    - "@Repository"
    - "@Service"
    - "@Controller"
    - "@RestController"
    - "@Query"
    - "@Modifying"
    - "@Transactional"
  
  # JPA 쿼리 메서드 패턴
  query_method_patterns:
    - "findBy*"
    - "findAll*"
    - "save*"
    - "delete*"
    - "count*"
    - "exists*"
    - "get*"
    - "search*"
    - "update*"
  
  # JPA Repository 인터페이스 탐지
  repository_interfaces:
    - "JpaRepository"
    - "CrudRepository"
    - "PagingAndSortingRepository"

# Vue.js 분석 설정
vue_analysis:
  enabled: true
  # Vue 컴포넌트 탐지 패턴
  component_patterns:
    - "*.vue"
    - "*Management.vue"
    - "*Component.vue"
  
  # API 호출 패턴
  api_call_patterns:
    - "axios.get"
    - "axios.post"
    - "axios.put"
    - "axios.delete"
    - "fetch("
    - "$.ajax"
    - "$.get"
    - "$.post"
  
  # Vue 서비스 모듈 패턴
  service_patterns:
    - "*ApiService.js"
    - "*Service.js"
    - "api/*.js"
    - "services/*.js"
  
  # Vue 라우터 패턴
  router_patterns:
    - "router.js"
    - "routes.js"
    - "*Router.js"

# API 연결 구조 분석 설정
api_connection_analysis:
  enabled: true
  # REST API 엔드포인트 패턴
  endpoint_patterns:
    - "/api/*"
    - "/rest/*"
    - "*/jpa/*"
  
  # HTTP 메서드 탐지
  http_methods:
    - "GET"
    - "POST"
    - "PUT"
    - "DELETE"
    - "PATCH"
  
  # 프론트엔드 → 백엔드 연결 매핑
  frontend_backend_mapping:
    vue_component: "rest_controller"
    api_service: "controller_method"
    axios_call: "endpoint_mapping"

# 메타데이터 생성 설정
metadata_generation:
  # FRONTEND_API 테이블 생성
  frontend_api:
    enabled: true
    extract_from:
      - "vue_components"
      - "js_services"
      - "jsx_components"
  
  # API_ENTRY 테이블 생성
  api_entry:
    enabled: true
    extract_from:
      - "rest_controllers"
      - "controller_methods"
      - "request_mappings"
  
  # SQL_QUERY 테이블 생성 (JPA 쿼리)
  sql_query:
    enabled: true
    extract_from:
      - "jpa_repositories"
      - "query_methods"
      - "native_queries"
      - "@Query_annotations"
  
  # TABLE_INFO 테이블 생성
  table_info:
    enabled: true
    extract_from:
      - "jpa_entities"
      - "@Table_annotations"
      - "database_schemas"
  
  # CALL_CHAIN 테이블 생성
  call_chain:
    enabled: true
    track_relationships:
      - "vue_to_api"
      - "api_to_service"
      - "service_to_repository"
      - "repository_to_table"